[{"title":"Vim 使用说明","url":"/2020/12/08/Vim-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/","content":"vim两种模式，insert和normal模式，normal就是命令模式，insert就是编辑模式。\n参考https://coolshell.cn/articles/5426.html\n非常全的：https://vim.rtorr.com/lang/zh_cn\n# 插入模式i\t光标前插入a\t光标后插入，appendo\t在当前行后插入一个新行#移动0\t行前^\t本行第一个非空白字符$\t本行最后一个字符/pattern\t搜索pattern，回车后，按n到下一个# 粘贴拷贝dd\t删除当前行，并存入剪切板p \t粘贴剪切板yy\t拷贝当前行，等于ddp# 撤回u\tundoctrl+r\tredo# 打开保存退出:e &lt;filename&gt; 打开文件:w\t保存:saveas &lt;name&gt; 另存为:bn\t切换到下一个文件 next:bp\t切换到上一个文件 pre# 高级.\t重复上一次命令N&lt;command&gt;\t重复N次3dd\t删除3行5p\t粘贴5次# 移动:set nu\t显示行gg\t移动到第一行G\t移动到最后一行:12\t移动到第12行w\t下一个单词开头e\t下一个单词结尾，若在当前单词中间，就移动到当前单词结尾b\t当前单词开头%\t在括号上使用，移动到匹配的另一个括号*\t移动到和当前单词相同的下一个单词#\t移动到和当前单词相同的上一个单词&lt;start position&gt;&lt;command&gt;&lt;end position&gt;0y$\t从行开头复制到行结尾ye\t从当前位置拷贝到本单词的最后一个字符yb\t从当前位置前一个次方拷贝到本单词的第一个字符v 进入可视化v 方向键选择，然后y，可以范围复制v 方向键选择，然后d，可以范围删除\n\n","categories":["linux"],"tags":["vim"]},{"title":"flask结合nacos和GraphQL构建微服务","url":"/2020/12/17/flask%E7%BB%93%E5%90%88nacos%E5%92%8CGraphQL%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1/","content":"Flask结合nacos和graphql构建微服务\n准备pip install nacos-sdk-pythonpip install graphene\n\nFlask结合graphqlfrom graphene import ObjectType, Field, String,Int# 自定义的类型class ItemList(ObjectType):    class Meta:        description = &quot;这是返回类型的注释，要放在Meta类中，graphql会显示&quot;    data = List(Item) # list列表，Item是自定义类型    total = Int()\t\t# 标量类型    page = Field(PageInfo)\t# PageInfo是自定义类型，自定义类型需要有Field()class Query(ObjectType):        hello = Field(Result, user_name=String()) # Result是返回结果，name是参数    itemList = Field(ItemList,a = Int(),b = Int()) # ItemList是返回类型，a和b是传入的参数        def resolve_hello(root, info,user_name):        return Result(1,&quot;ok&quot;)\tdef resolve_itemList(root,info,a,b):        return ItemList()schema = Schema(query=Query)def create_app():    app = Flask(__name__)    app.add_url_rule(&#x27;/graphql&#x27;,  view_func=GraphQLView.as_view(&#x27;graphql&#x27;, schema=schema, graphiql=True))        @app.route(&#x27;/hello&#x27;, methods=[&#x27;get&#x27;])    def hello(): # 普通请求        return &quot;hello&quot;    return appif __name__ == &#x27;__main__&#x27;:    app = create_app()    ip = getIp()    print(ip)    app.run(ip,9099,debug=True)    # 用如下方式，如果不想出现WARNING: This is a development server. Do not use it in a production deployment.    # server = pywsgi.WSGIServer((ip, 9099), app)    # server.serve_forever()    # 在ip:9099/graphql下，即可访问# 在graphql中，请求如下#&#123;#\thello(user_name:&quot;tom&quot;)&#123; result &#125;#&#125;\n\n\n\n注册服务&amp;维持心跳import timeimport nacosimport socketdef getIp():    hostname = socket.gethostname()    ip = socket.gethostbyname(hostname)    return ipSERVER_ADDRESSES = &quot;1.1.1.1:8848&quot;NAMESPACE = &quot;public&quot;client = nacos.NacosClient(SERVER_ADDRESSES, namespace=NAMESPACE, username=&quot;nacos&quot;, password=&quot;nacos&quot;)# 注册实例client.add_naming_instance(&quot;service-hello&quot;, ip=utils.getIp(), port=&quot;9099&quot;)# 需要不断发送心跳while True:    time.sleep(3)    client.send_heartbeat(&quot;service-hello&quot;,ip=getIp(),port=&quot;9099&quot;) # 持续发心跳\n\nspring调用python的微服务\n// FeignClient接口@Service@FeignClient(name = &quot;service-hello&quot;)public interface AnormalClient &#123;    @PostMapping(value=&quot;/graphql&quot;, consumes= MediaType.APPLICATION_JSON_VALUE)    String graphql(String sql);    @GetMapping(&quot;/hello&quot;)    String hello();&#125;// 调用微服务String name = &quot;tom&quot;;String q = String.format(&quot;&#123; hello(name: &#x27;%s&#x27;)&#123;code &#125;&#125;&quot;,name ).replace(&#x27;\\&#x27;&#x27;,&#x27;&quot;&#x27;);JSONObject jsonObject=new JSONObject();jsonObject.put(&quot;query&quot;,q);System.out.println(jsonObject.toJSONString());String result = anormalClient.graphql(jsonObject.toJSONString());System.out.println(result);\n\n\n\n遇到的问题There was an unexpected error (type&#x3D;Internal Server Error, status&#x3D;500).message&quot;:&quot;Must provide query string.&quot;1 在postman上按照graphql的格式请求可以正常返回结果2 抓包后发现请求是 content-type:text&#x2F;plain 格式的。3 在postman上按照 content-type:application&#x2F;json格式请求时，可以正常返回结果。在postman上按照 content-type:text&#x2F;plain 的格式请求，出现同样错误message&quot;:&quot;Must provide query string&quot;，所以错误原因时请求的content-type格式问题。4 将请求设置为appllication&#x2F;json格式只需要修改注解即可：consumes指定content-Type格式。@PostMapping(value&#x3D;&quot;hello&quot;,consumes&#x3D; MediaType.APPLICATION_JSON_VALUE)测试通过。\n\n","categories":["python"],"tags":["flask","nacos","graphql","微服务"]},{"title":"使用hexo创建github pages","url":"/2020/12/01/hello-world/","content":"hexo：一个使用简单的博客框架，通过md文件生成静态页面。Travis CI：持续集成工具，检测到github上的提交后，自动执行脚本，更新静态页面hexo主题：ILS\n创建两个分支，main和gp-pages，main存放所有文件，gh-pages存放生成的页面，同时在settings里面将gh-pages设置为github Pages的默认分支。使用时，只需要git上传md文件，travis就会自动执行脚本，更新gh-pages分支内容。\n使用# 创建$ hexo new &quot;My New Post&quot;# 本地生成$ hexo g # 本地演示$ hexo server# 上传$ git push origin main\n\n问题push代码后，打开blog页面，发现是一片空白。看gh-pages里面生成的代码，是空的。本地hexo generate是没有问题的。检查main分支的themes下的ils，是空的。且ils文件夹有一个白色箭头，代表一个子模块。重新git add themes/ils，出现错误。fatal: in unpopulated submodule &#x27;themes/ils&#x27;git rm -rf themes/ils删掉ils，再重新添加，解决。\n","categories":["其他"],"tags":["hexo","git"]},{"title":"使用hexo创建blog","url":"/2022/05/28/%E4%BD%BF%E7%94%A8hexo%E5%88%9B%E5%BB%BAblog/","content":"使用hexo创建blog\nhexo new xxxhexo g #hexo generatehexo server hexo ","categories":["Life"],"tags":["Hexo"]},{"title":"使用wsl","url":"/2022/05/28/%E4%BD%BF%E7%94%A8wsl/","content":"","categories":["Life"],"tags":["Hexo"]}]