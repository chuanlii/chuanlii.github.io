[{"title":"抓包deepseek的api","path":"/2025/04/02/抓包deepseek的api/","content":"问题：直接请求deepseek的api，回答的内容和通过cline返回的结果有很多区别，比如问今天几号，前者会回答以前的时间。 通过抓包来验证一些，promot有什么区别。 抓包https包1 装个 mitmproxy， 启动mitmweb.exe 这个按中间人攻击的方式实现的，还需要装个ca证书 2 打开设置，将系统代理设置为mitmproxy的端口3 下载证书打开 https://mitm.it, 下载windows的证书，安装（不用设置密码）4 在mitmweb的Flow list中，根据关键词过滤deepseek。 验证直接请求api，模型是不知道时间的。问今天几号也不知道。 通过cline请求，cline会带上非常长的system的prompt，有好几万的token。user的promot中，还会带上环境详情（包括时间等）。下一次提问时，cline会把历史的ai和user的对话都带上传过去，每次都要几十k的数据。 MCP：通过抓包发行，启动mcp后，cline会在系统prompt中，加上mcp的详细描述，每个方法参数等，之后还带上了一个查询天气的mcp的使用示例。","tags":["网络"],"categories":["网络"]},{"title":"MAGA和特朗普政策","path":"/2025/03/27/MAGA和特朗普政策/","content":"政治MAGAmaga群体 白人、中老年、教育程度较低、农村或小城镇地区。白人蓝领工人，底层白人、中产。反建制派选民极右翼 深层政府由一些官僚、军事、情报、金融等领域的精英组成的非正式权利网络。该群体掌握关键职位和资源，实际操控国家政策。比如军工复合体推动军事干预，或金融集团维护宽松监管 觉醒文化（Woke Culture）是对系统性不平等、歧视和权力结构的批判性反思，强调对边缘群体的权益保护。就是政治正确、lgbtq+群体，女权、动保等。 民主党&amp;共和党 维度 共和党（GOP） 民主党（Democrats） 核心理念 传统资本主义秩序 进步主义治理架构 经济主张 自由市场至上（减税、去监管） 政府干预经济（福利、环保投资） 社会文化 保守传统（宗教、反”觉醒文化”） 多元进步（LGBTQ+、种族平等） 国家机器 强权政府（军警、边境管控） 制度性公平（司法改革、移民包容） 外交政策 单边主义（美国优先、强硬对抗） 全球主义（多边合作、气候协议） 代表群体 石油军工集团、福音派、小企业主 科技金融资本、工会、城市精英 选民基础 白人蓝领、乡村、南方保守派 少数族裔、年轻群体、沿海都市 深层逻辑 维护能源-军工霸权体系 构建数字-金融新霸权 共和党 = 传统能源/军工资本的利益捍卫者 民主党 = 新兴科技/金融资本的规则制定者通过“左右轮替”维持系统稳定，但共同服务于资本扩张的核心逻辑 maga政策从经济上来说：外来移民会抢夺底层白人的工作，所以maga反对外来移民。因为全球化，外国工人会争夺美国的工作，所以maga反外国工人，反对全球化，所以与全球化的资本对立。因为底层白人受教育程度不高，所以比较保守传统，反对lagtq+，反对觉醒文化等。因为来自传统工业区的白人蓝领工人，涉及传统能源、制造业，而新能源会导致他们失业，所以反对新能源，反对环保。 所有的政策来源，都来自于有价值的选票群体的，自身的经济和阶级诉求。 经济美联储的目标最大化就业：通过调节货币政策促进充分就业，降低失业率。 稳定物价：控制通货膨胀（通常以2%年通胀率为目标），避免物价剧烈波动。 特朗普政策目标：减少贸易逆差、保护美国产业（解决就业） 增加关税-》进口减少-》进口商品价格增加-》通货膨胀-》美联储加息-》国债收益率提高 -》政府成本提高财政赤字恶化 12345678910111213141516171819202122232425262728293031323334353637383940graph TD A[特朗普政策] --&gt; B[减税TCJA] A --&gt; C[对华关税] A --&gt; D[财政扩张] B --&gt; E[企业利润↑] E --&gt; F[股市↑] F --&gt; G[消费信心↑] C --&gt; H[进口成本↑] H --&gt; I[消费品通胀↑] I --&gt; J[美联储加息] J --&gt; K[国债利息成本↑] D --&gt; L[财政赤字↑] L --&gt; M[国债发行量↑] M --&gt; K K --&gt; N[偿债压力↑] J --&gt; O[美元走强] O --&gt; P[出口竞争力↓] C --&gt; Q[贸易伙伴反制] Q --&gt; R[农业出口↓] A --&gt; S[MAGA目标] S --&gt; T[制造业回流] T --&gt; U[企业投资自动化] I --&gt; V[政策矛盾] J --&gt; V L --&gt; V W[新冠疫情] --&gt; X[美联储降息至0] W --&gt; Y[财政刺激↑] Y --&gt; M X --&gt; F %% 样式定义 classDef green fill:#d5f5e3,stroke:#28b463; classDef red fill:#fadbd8,stroke:#e74c3c; classDef orange fill:#fdebd0,stroke:#f39c12; classDef blue fill:#d6eaf8,stroke:#3498db; class B,E,F,G green class C,H,I,J,K,L,M,N,Q,R red class V,T,W orange class A,S,D,P,O,X,Y blue","tags":["政治"],"categories":["政治"]},{"title":"python中一些问题","path":"/2025/03/23/python中一些问题/","content":"Python模块导入问题目录结构12345678910├── proj│ ├── p1│ │ ├── __init__.py│ │ ├── m1a.py│ │ └── m1b.py│ ├── p2│ │ ├── __init__.py│ │ └── m2c.py│ ├── md.py│ └── main.py 原理当前执行模块作为主模块，会把主模块所在当前路径加入sys.path，会在sys.path中找所在的包。main.py作为主模块执行时，是看不到上一层proj的，只能看到p1，p2，mdm1b.py作为主模块是看不到p1的每个module的__name__都是引用的路径，比如m1a.py的__name__是p1.m1a当m1a.py作为主模块执行时，m1a.py的__name__就是__main__了 问题123456├── proj│ ├── p1│ │ ├── __init__.py│ │ ├── m1a.py # from p1.m1b import fb; def fa() 等价于 from .m1b import fb; def fa()│ │ └── m1b.py # fb()│ └── main.py # from p1.m1a import fa; fa() 执行main.py，正常，因为当前路径为proj/，m1a中的.m1b等于p1.m1b，main.py是可见的执行m1a.py，就会报错attempted relative import with no known parent package，因为：当前路径是proj/p1/，只能看到p1下面的内容，但是m1a中的.m1b等于p1.m1b，看不到p1，所以找不到p1.m1b 将m1a.py改为from m1b import fb：执行m1a.py可以，但main.py会报错将m1a.py改为from p1.m1b import fb：执行m1a.py会报错，但main.py正常 解决方案1. 避免这种场景（推荐）不要在m1a.py中执行要执行就把代码放到外面的main.py中 2. 使用 -m 参数要执行m1a.py，不要用python m1a.py首先进入proj/下，使用 python -m p1.m1a 来执行，这样sys.path中是 proj，这时就能看到proj/下面的包p1了 如果m1a.py中是 from p1.m1b import fb执行python m1a.py，则sys.path中有 proj/p1，这时看不到包p1 3. 使用 setup.py 安装包在proj/下，创建setup.py： 123456from setuptools import setup, find_packagessetup( name = &#x27;test_package&#x27;, packages = find_packages(),) 执行： 12python setup.py install --user # 这个可以在当前目录看到安装的内容python p1/pa.py 4. 在 init.py 中添加包路径在m1a.py中改为相对引用 from m1b import fb在__init__.py中加上： 1234import osimport syssys.path.append(os.path.dirname(os.path.realpath(__file__))) 注意：在出现同名模块时，可能有问题 5. 根据 name 执行不同的引入方式在m1a.py的代码前面，加上： 1234if __name__ == &#x27;__main__&#x27;: from m1b import fbelse: from .m1b import fb","tags":["编程"],"categories":["python"]},{"title":"mcp学习","path":"/2025/03/21/mcp学习/","content":"Cline 安装 Node.js 启动的 MCP Server 连接失败问题描述在 Windows 环境下，使用 npx 启动 MCP Server 时出现以下错误： 1spawn npx ENOENT spawn npx ENOENT 解决方案将启动方式从 npx 改为 node 启动。 具体步骤 安装依赖： 1npm install -g @modelcontextprotocol/server-filesystem 修改配置文件： 12345678910&quot;filesystem&quot;: &#123; &quot;command&quot;: &quot;node&quot;, &quot;args&quot;: [ &quot;C:/Users/xxx/AppData/Roaming/npm/node_modules/@modelcontextprotocol/server-filesystem/dist/index.js&quot;, &quot;e:/study/my_pages&quot; ], &quot;disabled&quot;: false, &quot;autoApprove&quot;: [], &quot;timeout&quot;: 30&#125; 修改前配置1234567891011&quot;filesystem&quot;: &#123; &quot;command&quot;: &quot;npx&quot;, &quot;args&quot;: [ &quot;-y&quot;, &quot;@modelcontextprotocol/server-filesystem&quot;, &quot;e:/study/my_pages&quot; ], &quot;disabled&quot;: false, &quot;autoApprove&quot;: [], &quot;timeout&quot;: 30&#125;","tags":["mcp","ai"],"categories":["AI"]},{"title":"读书《看懂金融的第一本书》","path":"/2025/03/18/看懂金融的第一本书/","content":"金融产品打新（新股申购）为什么有新股溢价？市场炒作和投机，发行价一般比市场价格低。 为什么A股称为政策市？为什么分红少？更倾向于再投资，a股散户更多，更倾向于短期股价波动，而不是长期股息收益。缺乏强制分红制度，只是鼓励。 股息率和市盈率的关系？股息率= 股息/股价 市盈率= 股价/每股收益 每股收益中的一部分，会被拿来作为分红 一级市场和二级市场的区别？一级市场是发行者于购买者之间的交易市场。 交易的是新发型的证券二级市场是购买者之间的交易市场。交易的是已发行的证券。 债券？盈利的2种方式：利息买卖债券赚取差价 国债国债是几乎无风险的金融产品，其收益率是一切金融产品的定价标杆。 外汇外汇纯粹是投机，因为没有利息。 铸币税发行货币的国家获得的收入：币面价值-印钞成本 美国为什么打伊拉克经济上的解释：美元失去于黄金的绑定后，建立了美元石油体系，海湾国家的石油只能以美元来结算。2002年，欧元成为欧元区的法定货币。伊拉克采用欧元来结算石油。美国需要采取措施捍卫美元的地位。 期权期货有买入期权和卖出期权。期权持有人可以按约使用权利，也可以任其作废，还可以在有效期内将权利转售给其他人 期权：有权决定是否履行合约期货：合约到期，必须履行。 期货市场是个零和游戏。 期货对于卖出者相当于一个保险，给卖出者一个固定的价格；对买入者就相当于投机。 金融危机","tags":["投资"],"categories":["读书"]},{"title":"投资中的概念名词","path":"/2025/03/16/投资中的概念名词/","content":"非对称风险潜在损失和潜在收益之间的不平衡。 高收益通常伴随高风险，但高风险未必带来高收益；杠杆能放大收益，但也会加剧损失，需谨慎使用；","tags":["Hexo"],"categories":["Life"]},{"title":"基金投资2503","path":"/2025/03/16/基金投资2503/","content":"1. 趋势判断和短期交易在上涨趋势中可以短期交易，过2天就买入卖出，在其他趋势中，短期交易很容易亏钱。 2. 仓位管理要有仓位的概念。比如，只有在自己认为非常低位的情况下，才可以满仓。不然，等出现更好的低位时，没有资金投入了。 仓位建议：假设有20万资金，平时最多只放进去10万。下跌时，就买入一部分，等跌到上证3000以下，可以慢慢满仓（毕竟2800也不是没有发生过，但这种机会几年才能遇到一次）。 预期高点：比如4000点。到这个位置后，就全部卖出。 3. 对称交易策略与交易一致性“对称交易策略”或“交易一致性”强调，投资者进入市场的原因和条件，也应该是他们退出市场的原因和条件。这种方法强调一致性和纪律性，确保交易决策不受情绪或外部噪音的影响。 长期持有：未来看好国家发展和股市，就要一直持有，不要轻易听信一些人云亦云的话，网上说什么的都有。 4. 认知与收益只能赚到自己认知以内的钱。即概率论中的“大数定律”，当交易次数足够多时，人的胜率就会收敛于一个自己认知决定的概率。 5. 逆向投资策略“别人贪婪我恐惧，别人恐惧我贪婪”是反人性的。大家都在赚钱的时候，就是高点，这时候要退出；大家都亏钱的时候，就是低点，这时候要买入。 常见误区：为什么大多数人买股票都是亏的？一个原因是：大多数人入场的时候，都是股市涨到了高点的时候。这时候的股票已经很贵了，入场很难赚到钱，之后就是下跌行情。 正确做法：应该在股票便宜的时候入场，即：当听到周围炒股的朋友说自己亏了很多钱时，这是最佳入场时机。6. 风险与收益收益高的都是高风险的，不可能既有高收益，又有低风险 7. 见好就收3月初，上涨到最高点的时候，总觉得第二天还会涨，不仅没想着卖掉，还想着加仓，结果之后一周一直在跌，结果收益跌没了，跌的比赚的多。在大跌到低点附近的时候，没有及时加仓，因为担心明天还会跌，不敢加仓，导致错过了低位买入的时机。 如果见好就收，之前的利润可以到手，而且到低点的时候，还可以低位买入。 如何见好就收？将要投资的资金分为3份，1份作为长期持有；1份用于短期交易，1份用于抄底或底牌；在快到达近2周的高点的时候，就卖出短期交易的1份；如果认为接下来是牛市，就一直持有长期持有的1份；当有重大利好，或其他机会，再使用用于抄底的1份。","tags":["Hexo"],"categories":["基金"]},{"title":"arch升级问题","path":"/2025/03/15/arch升级问题/","content":"长期没有使用的arch系统的电脑，升级报错。 pacman -Syyu 更新时，提示glibc版本过低，需要2.38版本，所有的都无法升级 12pacman: /usr/lib/libc.so.6: version `GLIBC_2.38&#x27; not found (required by pacman)pacman: /usr/lib/libc.so.6: version `GLIBC_2.38&#x27; not found (required by /usr/lib/libalpm.so.15) 失败的尝试：到镜像仓库，手动下载后，pacman -U 安装，仍然提示glibc问题 解决方式： 打开 https://aur.archlinux.org/packages/pacman-static 找到置顶评论，下载一个二进制包https://pkgbuild.com/~morganamilo/pacman-static/x86_64/bin/下载好这个包之后，直接 chmod +x pacman-static 最后执行下面的命令安装缺失的 glibc 1./pacman-static -S glibc 但是提示秘钥检查错误 is unknown trust 解决方式：直接临时禁用，到/etc/pacman.conf 设置 SigLevel = Never，然后重试即可 之后去掉禁用，重新设置秘钥 123sudo pacman-key --initsudo pacman-key --populate archlinuxsudo pacman-key --refresh-keys 之后正常安装即可","tags":["arch"],"categories":["environment"]},{"title":"一些工具","path":"/2022/07/21/一些工具/","content":"win上的免费剪切板工具： Ditto","tags":["Hexo"],"categories":["Life"]},{"title":"WebAssembly","path":"/2022/05/28/WebAssembly/","content":"一个WebAssembly例子 1234567891011121314rustc --version 检查是否安装rustup 安装和版本管理工具Cargo：Rust 的构建工具和包管理器rustup update 升级rustcargo new hello 创建项目cargo build 可以构建项目cargo run 可以运行项目cargo test 可以测试项目cargo doc 可以为项目构建文档cargo publish 可以将库发布到 crates.io 更新cargo 源在.cargo/下，创建config文件，配置如下 12345[source.crates-io]registry = &quot;https://github.com/rust-lang/crates.io-index&quot;replace-with = &#x27;ustc&#x27;[source.ustc]registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot; 123456789安装wasm-packsudo curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | shcargo install cargo-generatecargo generate --git https://github.com/rustwasm/wasm-pack-templatewasm-pack build","tags":["Hexo"],"categories":["Life"]},{"title":"使用wsl","path":"/2022/05/28/使用wsl/","content":"windows应用商店下载太慢，更新DNS为4.2.2.1,然后刷新dnsipconfig /flushdns. 准备阶段 12345678910111213141516171819# /etc/apt/source.list 更新源# 安装常用软件apt install net-toolsapt install curl# nodejsapt install nodejsapt install npm npm config set registry http://npmmirror.com # 换个镜像源# gotar -C /usr/local -xzf goxx-amd64.tar.gz# 在/etc/profile中加环境变量export PATH=$PATH:/usr/local/go/binsource /etc/profile# rubysudo apt install rbenvrbenv install --listrbenv install 2.7.1 ruby 1","tags":["Hexo"],"categories":["Life"]},{"title":"flask结合nacos和GraphQL构建微服务","path":"/2020/12/17/flask结合nacos和GraphQL构建微服务/","content":"Flask结合nacos和graphql构建微服务 准备12pip install nacos-sdk-pythonpip install graphene Flask结合graphql12345678910111213141516171819202122232425262728293031323334353637383940414243444546from graphene import ObjectType, Field, String,Int# 自定义的类型class ItemList(ObjectType): class Meta: description = &quot;这是返回类型的注释，要放在Meta类中，graphql会显示&quot; data = List(Item) # list列表，Item是自定义类型 total = Int() # 标量类型 page = Field(PageInfo)\t# PageInfo是自定义类型，自定义类型需要有Field()class Query(ObjectType): hello = Field(Result, user_name=String()) # Result是返回结果，name是参数 itemList = Field(ItemList,a = Int(),b = Int()) # ItemList是返回类型，a和b是传入的参数 def resolve_hello(root, info,user_name): return Result(1,&quot;ok&quot;)\tdef resolve_itemList(root,info,a,b): return ItemList()schema = Schema(query=Query)def create_app(): app = Flask(__name__) app.add_url_rule(&#x27;/graphql&#x27;, view_func=GraphQLView.as_view(&#x27;graphql&#x27;, schema=schema, graphiql=True)) @app.route(&#x27;/hello&#x27;, methods=[&#x27;get&#x27;]) def hello(): # 普通请求 return &quot;hello&quot; return appif __name__ == &#x27;__main__&#x27;: app = create_app() ip = getIp() print(ip) app.run(ip,9099,debug=True) # 用如下方式，如果不想出现WARNING: This is a development server. Do not use it in a production deployment. # server = pywsgi.WSGIServer((ip, 9099), app) # server.serve_forever() # 在ip:9099/graphql下，即可访问# 在graphql中，请求如下#&#123;#\thello(user_name:&quot;tom&quot;)&#123; result &#125;#&#125; 注册服务&amp;维持心跳1234567891011121314151617181920import timeimport nacosimport socketdef getIp(): hostname = socket.gethostname() ip = socket.gethostbyname(hostname) return ipSERVER_ADDRESSES = &quot;1.1.1.1:8848&quot;NAMESPACE = &quot;public&quot;client = nacos.NacosClient(SERVER_ADDRESSES, namespace=NAMESPACE, username=&quot;nacos&quot;, password=&quot;nacos&quot;)# 注册实例client.add_naming_instance(&quot;service-hello&quot;, ip=utils.getIp(), port=&quot;9099&quot;)# 需要不断发送心跳while True: time.sleep(3) client.send_heartbeat(&quot;service-hello&quot;,ip=getIp(),port=&quot;9099&quot;) # 持续发心跳 spring调用python的微服务 12345678910111213141516171819// FeignClient接口@Service@FeignClient(name = &quot;service-hello&quot;)public interface AnormalClient &#123; @PostMapping(value=&quot;/graphql&quot;, consumes= MediaType.APPLICATION_JSON_VALUE) String graphql(String sql); @GetMapping(&quot;/hello&quot;) String hello();&#125;// 调用微服务String name = &quot;tom&quot;;String q = String.format(&quot;&#123; hello(name: &#x27;%s&#x27;)&#123;code &#125;&#125;&quot;,name ).replace(&#x27;\\&#x27;&#x27;,&#x27;&quot;&#x27;);JSONObject jsonObject=new JSONObject();jsonObject.put(&quot;query&quot;,q);System.out.println(jsonObject.toJSONString());String result = anormalClient.graphql(jsonObject.toJSONString());System.out.println(result); 遇到的问题1234567891011There was an unexpected error (type=Internal Server Error, status=500).message&quot;:&quot;Must provide query string.&quot;1 在postman上按照graphql的格式请求可以正常返回结果2 抓包后发现请求是 content-type:text/plain 格式的。3 在postman上按照 content-type:application/json格式请求时，可以正常返回结果。在postman上按照 content-type:text/plain 的格式请求，出现同样错误message&quot;:&quot;Must provide query string&quot;，所以错误原因时请求的content-type格式问题。4 将请求设置为appllication/json格式只需要修改注解即可：consumes指定content-Type格式。@PostMapping(value=&quot;hello&quot;,consumes= MediaType.APPLICATION_JSON_VALUE)测试通过。","tags":["flask","nacos","graphql","微服务"],"categories":["python"]},{"title":"Vim 使用说明","path":"/2020/12/08/Vim-使用说明/","content":"vim两种模式，insert和normal模式，normal就是命令模式，insert就是编辑模式。 参考https://coolshell.cn/articles/5426.html 非常全的：https://vim.rtorr.com/lang/zh_cn 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# 插入模式i\t光标前插入a\t光标后插入，appendo\t在当前行后插入一个新行#移动0\t行前^\t本行第一个非空白字符$\t本行最后一个字符/pattern\t搜索pattern，回车后，按n到下一个# 粘贴拷贝dd\t删除当前行，并存入剪切板p 粘贴剪切板yy\t拷贝当前行，等于ddp# 撤回u\tundoctrl+r\tredo# 打开保存退出:e &lt;filename&gt; 打开文件:w\t保存:saveas &lt;name&gt; 另存为:bn\t切换到下一个文件 next:bp\t切换到上一个文件 pre# 高级.\t重复上一次命令N&lt;command&gt;\t重复N次3dd\t删除3行5p\t粘贴5次# 移动:set nu\t显示行gg\t移动到第一行G\t移动到最后一行:12\t移动到第12行w\t下一个单词开头e\t下一个单词结尾，若在当前单词中间，就移动到当前单词结尾b\t当前单词开头%\t在括号上使用，移动到匹配的另一个括号*\t移动到和当前单词相同的下一个单词#\t移动到和当前单词相同的上一个单词&lt;start position&gt;&lt;command&gt;&lt;end position&gt;0y$\t从行开头复制到行结尾ye\t从当前位置拷贝到本单词的最后一个字符yb\t从当前位置前一个次方拷贝到本单词的第一个字符v 进入可视化v 方向键选择，然后y，可以范围复制v 方向键选择，然后d，可以范围删除","tags":["vim"],"categories":["linux"]},{"title":"使用hexo创建github pages","path":"/2020/12/01/hexo创建gitpages/","content":"hexo：一个使用简单的博客框架，通过md文件生成静态页面。Travis CI：持续集成工具，检测到github上的提交后，自动执行脚本，更新静态页面hexo主题：ILS 创建两个分支，main和gp-pages，main存放所有文件，gh-pages存放生成的页面，同时在settings里面将gh-pages设置为github Pages的默认分支。使用时，只需要git上传md文件，travis就会自动执行脚本，更新gh-pages分支内容。 使用12345678910111213141516npm install hexo-cli -gnpm init xxcd xx# 创建$ hexo new &quot;My New Post&quot;# 本地生成$ hexo g # 本地演示$ hexo server# 部署 https://hexo.io/zh-cn/docs/one-command-deployment# 安装hexo-deployer-git后，$ hexo clean $ hexo d 问题12345678push代码后，打开blog页面，发现是一片空白。看gh-pages里面生成的代码，是空的。本地hexo generate是没有问题的。检查main分支的themes下的ils，是空的。且ils文件夹有一个白色箭头，代表一个子模块。重新git add themes/ils，出现错误。fatal: in unpopulated submodule &#x27;themes/ils&#x27;git rm -rf themes/ils删掉ils，再重新添加，解决。","tags":["hexo","git"],"categories":["其他"]}]